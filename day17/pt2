#!/usr/bin/env python3

import sys
from tqdm import tqdm

input = sys.stdin.read().rstrip()

# scuffed coordinate system, the entire thing is mirrored
# in the y-axis
blocks = """
####

.#.
###
.#.

###
..#
..#

#
#
#
#

##
##
""".strip().split("\n\n")

blocks = [b.split("\n") for b in blocks]

grid = []
height = 0
WIDTH = 7
floor = 0
pushcnt = 0

dim = lambda rock: (len(rock[0]), len(rock))

deltas = []
keys = []
cyclic = []

def space(rock, pos):
    width, height = dim(rock)
    x0, y0 = pos

    if x0 < 0:
        return False

    if y0 >= 0:
        return True

    if y0 < floor:
        return False

    for y in range(height):
        for x in range(width):
            xi = x+x0
            yi = y+y0

            if yi >= 0:
                return True

            if xi < 0 or xi >= WIDTH:
                return False

            if rock[y][x] == "#" and grid[yi][xi] == "#":
                return False

    return True

def push(rock, pos):
    width, height = dim(rock)
    x0, y0 = pos
    x1, _ = x0+width-1, y0+height-1

    global pushcnt

    i = pushcnt % len(input)
    pushcnt += 1

    if input[i] == "<":
        if x0 > 0 and space(rock, (x0-1, y0)):
            return x0-1, y0

    elif input[i] == ">":
        if x1 < WIDTH-1 and space(rock, (x0+1, y0)):
            return x0+1, y0
    else: raise Exception("invalid char")

    return x0, y0

TIMES = 1_000_000_000_000

for i in range(TIMES):
    rock = blocks[i % len(blocks)]
    pos = (2, 3)

    while 1:
        pos = push(rock, pos)
        x0, y0 = pos

        if space(rock, (x0, y0-1)):
            pos = (x0, y0-1)

        _, y1 = pos
        # print(pos)

        if y0 == y1:
            break

    w, h = dim(rock)
    x0, y0 = pos
    for y in range(h):
        row = [x for x in grid[y+y0]] if y+y0 < 0 else ["." for _ in range(WIDTH)]
        for x in range(w):
            row[x+x0] = rock[y][x] if rock[y][x] == "#" else row[x+x0]

        if y+y0 < 0:
            grid[y+y0] = ''.join(row)
        else:
            grid.append(''.join(row))

    deltas.append(floor + len(grid))
    key = (i % len(blocks), pushcnt % len(input), floor + len(grid))

    if key in keys:
        if key not in cyclic:
            cyclic.append(key)
        else:
            i+=1

            height_diff = []
            for c in cyclic:
                _, _, key_height = c
                height_diff.append(key_height)

            cycle_height = sum(height_diff)
            tower_height = len(grid)

            iters = (TIMES - i) // len(cyclic)
            tower_height += iters * cycle_height

            i += iters * len(cyclic)

            cycle_i = 1
            while i < TIMES:
                _, _, key_height = cyclic[cycle_i]
                cycle_i += 1
                i += 1
                tower_height += key_height

            print(tower_height)
            exit()

    keys.append(key)
    floor = -len(grid)
